# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//flutter/common/config.gni")

declare_args() {
  # Whether playgrounds are enabled for unit tests.
  impeller_enable_playground = false

  # Whether Impeller is supported on the platform.
  impeller_supports_platform = is_mac || is_ios || is_linux

  # Whether Impeller shaders are supported on the platform.
  impeller_shaders_supports_platform = is_mac || is_ios
}

# ------------------------------------------------------------------------------
# @brief           Define an Impeller component. Components are different
#                  Impeller subsystems part of the umbrella framework.
#
# @param[optional] target_type  The type of the component. This can be any of
#                               the target types supported by GN. Defaults to
#                               source_set. If Impeller is not supported on the
#                               target platform, this target is a no-op.
#
template("impeller_component") {
  if (impeller_supports_platform) {
    target_type = "source_set"
    if (defined(invoker.target_type)) {
      target_type = invoker.target_type
    }
    target(target_type, target_name) {
      forward_variables_from(invoker, "*")

      if (!defined(invoker.public_configs)) {
        public_configs = []
      }

      public_configs += [ "//flutter/impeller:impeller_public_config" ]

      if (!defined(invoker.cflags_objc)) {
        cflags_objc = []
      }

      if (is_ios || is_mac) {
        cflags_objc += flutter_cflags_objc_arc
      }

      if (!defined(invoker.cflags_objcc)) {
        cflags_objcc = []
      }

      if (is_ios || is_mac) {
        cflags_objcc += flutter_cflags_objcc_arc
      }
    }
  } else {
    group(target_name) {
      not_needed(invoker, "*")
    }
  }
}

# ------------------------------------------------------------------------------
# @brief           Build a Metal Library. The output is a single file. Use
#                  get_target_outputs to get its location on build.
#
# @param[required] name     The name of the Metal library.
#
# @param[required] sources  The GLSL (4.60) sources to compiled into the Metal
#                           library.
#
template("metal_library") {
  assert(is_ios || is_mac)
  assert(defined(invoker.name), "Metal library name must be specified.")
  assert(defined(invoker.sources), "Metal source files must be specified.")

  metal_library_name = invoker.name

  action("$target_name") {
    forward_variables_from(invoker,
                           "*",
                           [
                             "inputs",
                             "outputs",
                             "script",
                             "depfile",
                             "args",
                           ])

    inputs = invoker.sources

    metal_library_path = "$root_out_dir/shaders/$metal_library_name.metallib"

    outputs = [ metal_library_path ]

    script = "//flutter/impeller/tools/build_metal_library.py"

    depfile = "$target_gen_dir/shader_deps/$metal_library_name.depfile"

    args = [
      "--output",
      rebase_path(metal_library_path, root_out_dir),
      "--depfile",
      rebase_path(depfile),
    ]

    if (!is_debug) {
      args += [ "--optimize" ]
    }

    if (is_ios) {
      args += [ "--platform=ios" ]
    } else if (is_mac) {
      args += [ "--platform=mac" ]
    } else {
      assert(false, "Unsupported platform for generating Metal shaders.")
    }

    foreach(source, invoker.sources) {
      args += [
        "--source",
        rebase_path(source, root_out_dir),
      ]
    }
  }
}

# ------------------------------------------------------------------------------
# @brief           Build and reflect shader information. Reflected shader
#                  information will be added to a generated source set along
#                  with the shader contents.
#
# @param[required] name     The name of the shader library.
#
# @param[required] sources  The GLSL (4.60) sources to compiled into the shader
#                           library.
#
template("impeller_shaders_real") {
  assert(defined(invoker.shaders), "Impeller shaders must be specified.")
  assert(defined(invoker.name), "Name of the shader library must be specified.")

  base_target_name = target_name
  impellerc_target_name = "impellerc_$target_name"
  compiled_action_foreach(impellerc_target_name) {
    tool = "//flutter/impeller/compiler:impellerc"

    sources = invoker.shaders

    metal_intermediate = "$target_gen_dir/{{source_file_part}}.metal"
    spirv_intermediate = "$target_gen_dir/{{source_file_part}}.spirv"
    reflection_json_intermediate = "$target_gen_dir/{{source_file_part}}.json"
    reflection_header_intermediate = "$target_gen_dir/{{source_file_part}}.h"
    reflection_cc_intermediate = "$target_gen_dir/{{source_file_part}}.mm"

    outputs = [
      metal_intermediate,
      reflection_header_intermediate,
      reflection_cc_intermediate,
    ]

    depfile_path = "$target_gen_dir/{{source_file_part}}.d"

    metal_intermediate_path = rebase_path(metal_intermediate, root_build_dir)
    spirv_intermediate_path = rebase_path(spirv_intermediate, root_build_dir)
    depfile_intermediate_path = rebase_path(depfile_path, root_build_dir)

    reflection_json_path =
        rebase_path(reflection_json_intermediate, root_build_dir)
    reflection_header_path =
        rebase_path(reflection_header_intermediate, root_build_dir)
    reflection_cc_path = rebase_path(reflection_cc_intermediate, root_build_dir)

    depfile = depfile_path

    args = [
      "--input={{source}}",
      "--metal=$metal_intermediate_path",
      "--spirv=$spirv_intermediate_path",
      "--reflection-json=$reflection_json_path",
      "--reflection-header=$reflection_header_path",
      "--reflection-cc=$reflection_cc_path",
      "--include={{source_dir}}",
      "--depfile=$depfile_intermediate_path",
    ]

    if (is_mac) {
      args += [ "--macos" ]
    }
    if (is_ios) {
      args += [ "--ios" ]
    }
  }
  if (is_mac || is_ios) {
    metal_library_target_name = "metal_library_$target_name"
    metal_library(metal_library_target_name) {
      name = invoker.name
      sources = filter_include(get_target_outputs(":$impellerc_target_name"),
                               [ "*.metal" ])
      deps = [ ":$impellerc_target_name" ]
    }

    shader_glue_target_name = "glue_$target_name"
    shader_glue_config_name = "glue_config_$target_name"

    config(shader_glue_config_name) {
      impeller_root_gen_dir = get_path_info(
              get_label_info("//flutter/impeller:impeller", "target_gen_dir"),
              "dir")

      # Contains the generated header headers.
      include_dirs = [
        target_gen_dir,
        impeller_root_gen_dir,
      ]
    }

    source_set(shader_glue_target_name) {
      public_configs = [ ":$shader_glue_config_name" ]

      public = filter_include(get_target_outputs(":$impellerc_target_name"),
                              [ "*.h" ])
      sources = filter_include(get_target_outputs(":$impellerc_target_name"),
                               [
                                 "*.h",
                                 "*.cc",
                                 "*.mm",
                               ])

      deps = [
        ":$impellerc_target_name",
        "//flutter/impeller/renderer",
      ]
    }

    generate_embedder_data_sources = "embedded_data_gen_sources_$target_name"
    action(generate_embedder_data_sources) {
      metal_library_files = get_target_outputs(":$metal_library_target_name")
      metal_library_file = metal_library_files[0]
      inputs = [ metal_library_file ]
      output_header = "$target_gen_dir/$base_target_name.h"
      output_source = "$target_gen_dir/$base_target_name.c"
      outputs = [
        output_header,
        output_source,
      ]
      args = [
        "--symbol-name",
        base_target_name,
        "--output-header",
        rebase_path(output_header),
        "--output-source",
        rebase_path(output_source),
        "--source",
        rebase_path(metal_library_file),
      ]
      script = "//flutter/impeller/tools/xxd.py"
      deps = [ ":$metal_library_target_name" ]
    }

    shader_embedded_data_target_name = "embedded_data_$target_name"
    source_set(shader_embedded_data_target_name) {
      sources = get_target_outputs(":$generate_embedder_data_sources")
      deps = [ ":$generate_embedder_data_sources" ]
    }

    group(target_name) {
      public_deps = [
        ":$shader_embedded_data_target_name",
        ":$shader_glue_target_name",
      ]
    }
  }
}

# ------------------------------------------------------------------------------
# @brief           Builds the shader library from shader sources, generates
#                  reflected shader information as source set, and, generates a
#                  translation unit added as a source set that allows embedding
#                  shaders into the final binary. On platforms where Impeller is
#                  not supported, this is a no-op.
#
# @note            For additional information about parameters, see
#                  `impeller_shaders_real`
#
# @see             impeller_shaders_real
#
template("impeller_shaders") {
  if (impeller_shaders_supports_platform) {
    impeller_shaders_real(target_name) {
      forward_variables_from(invoker, "*")
    }
  } else {
    group(target_name) {
      not_needed(invoker, "*")
    }
  }
}
