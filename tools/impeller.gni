# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//flutter/common/config.gni")

declare_args() {
  # Whether playgrounds are enabled for unit tests.
  impeller_enable_playground = false
}

template("impeller_component") {
  source_set(target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(invoker.public_configs)) {
      public_configs = []
    }

    if (!defined(invoker.cflags_objc)) {
      cflags_objc = []
    }

    if (!defined(invoker.cflags_objcc)) {
      cflags_objcc = []
    }

    if (!defined(invoker.deps)) {
      deps = []
    }

    objc_warning_flags = [ "-Wno-unused-private-field" ]

    cflags_objc += flutter_cflags_objc_arc + objc_warning_flags
    cflags_objcc += flutter_cflags_objcc_arc + objc_warning_flags

    public_configs += [ "//flutter/impeller:impeller_public_config" ]

    deps += [
      "//flutter/fml",

      # For tracing, seems to be pulled in by FML. Must be removed.
      "//flutter/runtime:libdart",
    ]
  }
}

template("metal_library") {
  assert(defined(invoker.name), "Metal library name must be specified.")
  assert(defined(invoker.sources), "Metal source files must be specified.")

  metal_library_name = invoker.name

  action("$target_name") {
    forward_variables_from(invoker,
                           "*",
                           [
                             "inputs",
                             "outputs",
                             "script",
                             "depfile",
                             "args",
                           ])

    inputs = invoker.sources

    metal_library_path = "$root_out_dir/shaders/$metal_library_name.metallib"

    outputs = [ metal_library_path ]

    script = "//flutter/impeller/tools/build_metal_library.py"

    depfile = "$target_gen_dir/shader_deps/$metal_library_name.depfile"

    args = [
      "--output",
      rebase_path(metal_library_path, root_out_dir),
      "--depfile",
      rebase_path(depfile),
    ]

    if (!is_debug) {
      args += [ "--optimize" ]
    }

    if (is_ios) {
      args += [ "--platform=ios" ]
    } else if (is_mac) {
      args += [ "--platform=mac" ]
    } else {
      assert(false, "Unsupported platform for generating Metal shaders.")
    }

    foreach(source, invoker.sources) {
      args += [
        "--source",
        rebase_path(source, root_out_dir),
      ]
    }
  }
}

template("impeller_shaders") {
  assert(defined(invoker.shaders), "Impeller shaders must be specified.")
  assert(defined(invoker.name), "Name of the shader library must be specified.")

  base_target_name = target_name
  impellerc_target_name = "impellerc_$target_name"
  compiled_action_foreach(impellerc_target_name) {
    tool = "//flutter/impeller/compiler:impellerc"

    sources = invoker.shaders

    metal_intermediate = "$target_gen_dir/{{source_file_part}}.metal"
    spirv_intermediate = "$target_gen_dir/{{source_file_part}}.spirv"
    reflection_json_intermediate = "$target_gen_dir/{{source_file_part}}.json"
    reflection_header_intermediate = "$target_gen_dir/{{source_file_part}}.h"
    reflection_cc_intermediate = "$target_gen_dir/{{source_file_part}}.mm"

    outputs = [
      metal_intermediate,
      reflection_header_intermediate,
      reflection_cc_intermediate,
    ]

    depfile_path = "$target_gen_dir/{{source_file_part}}.d"

    metal_intermediate_path = rebase_path(metal_intermediate, root_build_dir)
    spirv_intermediate_path = rebase_path(spirv_intermediate, root_build_dir)
    depfile_intermediate_path = rebase_path(depfile_path, root_build_dir)

    reflection_json_path =
        rebase_path(reflection_json_intermediate, root_build_dir)
    reflection_header_path =
        rebase_path(reflection_header_intermediate, root_build_dir)
    reflection_cc_path = rebase_path(reflection_cc_intermediate, root_build_dir)

    depfile = depfile_path

    args = [
      "--input={{source}}",
      "--metal=$metal_intermediate_path",
      "--spirv=$spirv_intermediate_path",
      "--reflection-json=$reflection_json_path",
      "--reflection-header=$reflection_header_path",
      "--reflection-cc=$reflection_cc_path",
      "--include={{source_dir}}",
      "--depfile=$depfile_intermediate_path",
    ]

    if (is_mac) {
      args += [ "--macos" ]
    }
    if (is_ios) {
      args += [ "--ios" ]
    }
  }

  metal_library_target_name = "metal_library_$target_name"
  metal_library(metal_library_target_name) {
    name = invoker.name
    sources = filter_include(get_target_outputs(":$impellerc_target_name"),
                             [ "*.metal" ])
    deps = [ ":$impellerc_target_name" ]
  }

  shader_glue_target_name = "glue_$target_name"
  shader_glue_config_name = "glue_config_$target_name"

  config(shader_glue_config_name) {
    impeller_root_gen_dir = get_path_info(
            get_label_info("//flutter/impeller:impeller", "target_gen_dir"),
            "dir")

    # Contains the generated header headers.
    include_dirs = [
      target_gen_dir,
      impeller_root_gen_dir,
    ]
  }

  source_set(shader_glue_target_name) {
    public_configs = [ ":$shader_glue_config_name" ]

    public =
        filter_include(get_target_outputs(":$impellerc_target_name"), [ "*.h" ])
    sources = filter_include(get_target_outputs(":$impellerc_target_name"),
                             [
                               "*.h",
                               "*.cc",
                               "*.mm",
                             ])

    deps = [
      ":$impellerc_target_name",
      "//flutter/impeller/renderer",
    ]
  }

  generate_embedder_data_sources = "embedded_data_gen_sources_$target_name"
  action(generate_embedder_data_sources) {
    metal_library_files = get_target_outputs(":$metal_library_target_name")
    metal_library_file = metal_library_files[0]
    inputs = [ metal_library_file ]
    output_header = "$target_gen_dir/$base_target_name.h"
    output_source = "$target_gen_dir/$base_target_name.c"
    outputs = [
      output_header,
      output_source,
    ]
    args = [
      "--symbol-name",
      base_target_name,
      "--output-header",
      rebase_path(output_header),
      "--output-source",
      rebase_path(output_source),
      "--source",
      rebase_path(metal_library_file),
    ]
    script = "//flutter/impeller/tools/xxd.py"
    deps = [ ":$metal_library_target_name" ]
  }

  shader_embedded_data_target_name = "embedded_data_$target_name"
  source_set(shader_embedded_data_target_name) {
    sources = get_target_outputs(":$generate_embedder_data_sources")
    deps = [ ":$generate_embedder_data_sources" ]
  }

  group(target_name) {
    public_deps = [
      ":$shader_embedded_data_target_name",
      ":$shader_glue_target_name",
    ]
  }
}
